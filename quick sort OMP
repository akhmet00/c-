#include<iostream>
#include<omp.h>
#include<stdlib.h>
#define n 10000000
using namespace std;
int arr[n];
int partition(int arr[], int low, int high){
	int i, j, temp, key;
	key = arr[low];
	i= low + 1;
	j= high;
	while(1){
		while(i < high && key >= arr[i])
    			i++;
		while(key < arr[j])
    			j--;
		if(i < j){
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
		else{
			temp= arr[low];
			arr[low] = arr[j];
			arr[j]= temp;
			return(j);
		}
	}
}

void quicksort(int arr[], int low, int high)
{
	int j;

	if(low < high){
		j = partition(arr, low, high);

		quicksort(arr, low, j - 1);
		quicksort(arr, j + 1, high);

	}
}


int main()
{
	double start=omp_get_wtime();
	for(int i=0;i<n;i++){
		arr[i]=rand()%n;
}


	int j = partition(arr,0,n-1);
		#pragma omp parallel shared(arr)
		{
			#pragma omp master 
			{
			#pragma omp task shared(arr)
        			quicksort(arr,0, j - 1);
			#pragma omp task shared(arr)
        			quicksort(arr, j + 1, n-1);
        	#pragma omp taskwait
   		}
		}
//		#pragma omp parallel sections
//		{
//			#pragma omp section
//			{
//        			quicksort(arr,0, j - 1);
//    			}
//			#pragma omp section
//			{
//        			quicksort(arr, j + 1, n-1);
//   			}
//		}
	cout<<"Time: "<<omp_get_wtime()-start;

}

